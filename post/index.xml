<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on pedro querido</title>
    <link>http://pedroq.org/post/</link>
    <description>Recent content in Posts on pedro querido</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 08 May 2014 14:05:00 +0100</lastBuildDate>
    <atom:link href="http://pedroq.org/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Q&#39;s album pick of the month: April</title>
      <link>http://pedroq.org/2014/05/qs-album-pick-of-the-month-april/</link>
      <pubDate>Thu, 08 May 2014 14:05:00 +0100</pubDate>
      
      <guid>http://pedroq.org/2014/05/qs-album-pick-of-the-month-april/</guid>
      <description>

&lt;p&gt;During the last month I&amp;rsquo;ve been in a math rock mood, probably thanks to my serious addicion to Crash of Rhinos. My pick for April is:&lt;/p&gt;

&lt;h2 id=&#34;animals-by-this-town-needs-guns-2008:330455f8d810e596eeda3e28fd8608bb&#34;&gt;Animals by This Town Needs Guns (2008)&lt;/h2&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;//www.youtube.com/embed/7dLdNrv-seg?rel=0&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;You can get it here: &lt;a href=&#34;http://thistownneedsguns.bandcamp.com/album/animals&#34;&gt;http://thistownneedsguns.bandcamp.com/album/animals&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Q&#39;s album pick of the month: March</title>
      <link>http://pedroq.org/2014/04/qs-album-pick-of-the-month-march/</link>
      <pubDate>Mon, 07 Apr 2014 03:10:00 +0100</pubDate>
      
      <guid>http://pedroq.org/2014/04/qs-album-pick-of-the-month-march/</guid>
      <description>

&lt;p&gt;Welcome to the first post of the &lt;em&gt;Q&amp;rsquo;s album pick of the month&lt;/em&gt; series! Without further ado, the album that I pick for March is:&lt;/p&gt;

&lt;h1 id=&#34;distal-by-crash-of-rhinos-2011:4e4ee7b5c0b59d8ac700c9a1acbfc0e6&#34;&gt;Distal by Crash of Rhinos (2011)&lt;/h1&gt;

&lt;iframe style=&#34;border: 0; width: 450px; height: 700px;&#34; src=&#34;http://bandcamp.com/EmbeddedPlayer/album=1782745021/size=large/bgcol=ffffff/linkcol=0687f5/t=2/transparent=true/&#34; seamless&gt;&lt;a href=&#34;http://crashofrhinos.bandcamp.com/album/distal&#34;&gt;Distal by Crash Of Rhinos&lt;/a&gt;&lt;/iframe&gt;

&lt;p&gt;This album has been playing over and over again in my car. It&amp;rsquo;s my daily soundtrack during my commute to college.
Great riffs, great drumming and tremendous energy from the first to the last track. It&amp;rsquo;s it an interesting blend of punk, post-rock, hardcore and math-rock.&lt;/p&gt;

&lt;p&gt;You can get it for free (or maybe give these guys some support!) at bandcamp: &lt;a href=&#34;http://crashofrhinos.bandcamp.com/album/distal&#34;&gt;http://crashofrhinos.bandcamp.com/album/distal&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Introducing: Q&#39;s album pick of the month</title>
      <link>http://pedroq.org/2014/03/introducing-qs-album-pick-of-the-month/</link>
      <pubDate>Mon, 31 Mar 2014 00:24:00 +0100</pubDate>
      
      <guid>http://pedroq.org/2014/03/introducing-qs-album-pick-of-the-month/</guid>
      <description>&lt;p&gt;If you&amp;rsquo;re part of my friend circle, you surely know that I am a serious music addict. I&amp;rsquo;m the guy who&amp;rsquo;s frequently telling you to &amp;ldquo;give {&lt;em&gt;band name here&lt;/em&gt;} a listen!&amp;ldquo;.
I&amp;rsquo;m also the guy whose opinion some people trust when they are looking for something new to add to their music collection.&lt;/p&gt;

&lt;p&gt;Given all this I decided that I&amp;rsquo;ll start posting a monthly album recommendation. This will usually be some great album that I&amp;rsquo;ve found and I feel like I should pass it forward. It will also serve as some sort of journal for my musical findings. In a few months it will be nice to be able to go back and find out what I was listening to.&lt;/p&gt;

&lt;p&gt;I should note that these posts will be pretty simple. Just some album details, maybe an embedded track. But that&amp;rsquo;s it. I have no intentions to write reviews for these albums. And, after all, if I&amp;rsquo;m picking it it&amp;rsquo;s because I find it pretty good :)&lt;/p&gt;

&lt;p&gt;Hope you enjoy it!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Adding multilingual support to your Windows Phone application using the Multilingual App Toolkit</title>
      <link>http://pedroq.org/2013/08/adding-multilingual-support-to-your-windows-phone-application-using-the-multilingual-app-toolkit/</link>
      <pubDate>Mon, 19 Aug 2013 14:59:00 +0100</pubDate>
      
      <guid>http://pedroq.org/2013/08/adding-multilingual-support-to-your-windows-phone-application-using-the-multilingual-app-toolkit/</guid>
      <description>

&lt;p&gt;Windows Phone Store is currently available in 191 countries. This allows your application to have a global customer reach. This also means a lot of customer diversity. Language is one of these differences. Building and application that can target multiple languages can help provide a great user experience for as many users around the world as possible. &lt;br /&gt;
The Multilingual App Toolkit helps you in this process. It allows you to easily localize your app, either by yourself or using Microsoft Translator. You can also share this translation files with someone and then import them into your project. You can also import these translation files into a Windows 8 application.&lt;/p&gt;

&lt;h2 id=&#34;prerequisites:d75c5c8aeef46df8400d5a6ebfe21f5e&#34;&gt;Prerequisites&lt;/h2&gt;

&lt;p&gt;In order to user the Multilingual App Toolkit your application must be built or modified in order to support localization. This means that all your localized resources are separated from the code. MSDN has a great article on &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/windowsphone/develop/ff637520%28v=vs.105%29.aspx&#34;&gt;How to build a localized app for Windows Phone&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;multilingual-app-toolkit:d75c5c8aeef46df8400d5a6ebfe21f5e&#34;&gt;Multilingual App Toolkit&lt;/h3&gt;

&lt;p&gt;You can download the Multilingual App Toolkit here: &lt;a href=&#34;http://msdn.microsoft.com/en-us/windows/apps/hh848309.aspx&#34;&gt;Multilingual App Toolkit for Visual Studio 2012&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;example-application:d75c5c8aeef46df8400d5a6ebfe21f5e&#34;&gt;Example application&lt;/h2&gt;

&lt;p&gt;For this article we&amp;rsquo;ll create a simple Hello world! application based on the Windows Phone App template. It is a simple page with a Button and a TextBlock which displays a message when you tap the button.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pedroq.org/media/2013/Aug/WPMAT1.gif&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;This is the code for the &lt;strong&gt;MainPage.xaml&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;StackPanel x:Name=&amp;quot;TitlePanel&amp;quot; Grid.Row=&amp;quot;0&amp;quot; Margin=&amp;quot;12,17,0,28&amp;quot;&amp;gt;
    &amp;lt;TextBlock Text=&amp;quot;{Binding Path=LocalizedResources.ApplicationTitle, Source={StaticResource LocalizedStrings}}&amp;quot; Style=&amp;quot;{StaticResource PhoneTextNormalStyle}&amp;quot; Margin=&amp;quot;12,0&amp;quot;/&amp;gt;
    &amp;lt;TextBlock Text=&amp;quot;{Binding Path=LocalizedResources.MainPageName, Source={StaticResource LocalizedStrings}}&amp;quot; Margin=&amp;quot;9,-7,0,0&amp;quot; Style=&amp;quot;{StaticResource PhoneTextTitle1Style}&amp;quot;/&amp;gt;
&amp;lt;/StackPanel&amp;gt;

&amp;lt;!--ContentPanel - place additional content here--&amp;gt;
&amp;lt;Grid x:Name=&amp;quot;ContentPanel&amp;quot; Grid.Row=&amp;quot;1&amp;quot; Margin=&amp;quot;12,0,12,0&amp;quot;&amp;gt;
    &amp;lt;Button Content=&amp;quot;{Binding Path=LocalizedResources.ButtonText, Source={StaticResource LocalizedStrings}}&amp;quot; HorizontalAlignment=&amp;quot;Center&amp;quot; VerticalAlignment=&amp;quot;Top&amp;quot; Click=&amp;quot;Button_Click&amp;quot;/&amp;gt;
    &amp;lt;TextBlock x:Name=&amp;quot;tbMessage&amp;quot; HorizontalAlignment=&amp;quot;Center&amp;quot; VerticalAlignment=&amp;quot;Center&amp;quot; FontSize=&amp;quot;72&amp;quot; /&amp;gt;
&amp;lt;/Grid&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And the code behind:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;private void Button_Click(object sender, RoutedEventArgs e)
{
    tbMessage.Text = AppResources.HelloMessage;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A few entries were added to the &lt;strong&gt;AppResources.resx&lt;/strong&gt;. It looks like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pedroq.org/media/2013/Aug/WPMAT2.png&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;h2 id=&#34;enable-the-multilingual-app-toolkit:d75c5c8aeef46df8400d5a6ebfe21f5e&#34;&gt;Enable the Multilingual App Toolkit&lt;/h2&gt;

&lt;p&gt;To begin using the Multilingual App Toolkit you must first enable it. Open your project in Visual Studio, open &lt;strong&gt;Tools&lt;/strong&gt; menu and select &lt;strong&gt;Enable Multilingual App Toolkit&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pedroq.org/media/2013/Aug/WPMAT3.png&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;h2 id=&#34;add-new-languages:d75c5c8aeef46df8400d5a6ebfe21f5e&#34;&gt;Add new languages&lt;/h2&gt;

&lt;p&gt;To add a new language, go to the Solution Explorer and right-click your project. Select &lt;strong&gt;Add translation languages&amp;hellip;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pedroq.org/media/2013/Aug/WPMAT4.png&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;In the &lt;em&gt;Translation Languages&lt;/em&gt; window select the language(s) you want to add. In this example we&amp;rsquo;ll add Portuguese localization to our application.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pedroq.org/media/2013/Aug/WPMAT5.png&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;A new file called &lt;strong&gt;AppResources.&lt;em&gt;&lt;culture-code&gt;&lt;/em&gt;.xlf&lt;/strong&gt; is added to the &lt;em&gt;Resources&lt;/em&gt; folder. This is a &lt;a href=&#34;https://en.wikipedia.org/wiki/XLIFF&#34;&gt;XLIFF&lt;/a&gt;] file where localizable data is stored. You can export and import this file into your project. This allows you to share this file with a translator and later import it into your project. These &lt;em&gt;.xlf&lt;/em&gt; files are converted into &lt;em&gt;.resx&lt;/em&gt; files during compilation. These are are the same &amp;ldquo;.resx &amp;rdquo; files you would be using when localizing an application without the Multilingual App Toolkit.&lt;/p&gt;

&lt;h2 id=&#34;multilingual-editor-tool:d75c5c8aeef46df8400d5a6ebfe21f5e&#34;&gt;Multilingual Editor tool&lt;/h2&gt;

&lt;p&gt;Double click the file that was created in the previous step. The Multilingual Editor window will open. You can use this tool to translate your application in multiple ways:&lt;/p&gt;

&lt;h3 id=&#34;translate-your-application-by-yourself:d75c5c8aeef46df8400d5a6ebfe21f5e&#34;&gt;Translate your application by yourself&lt;/h3&gt;

&lt;p&gt;If you happen to speak the language you&amp;rsquo;re adding to your application, you can translate it all by yourself. Simply go through the list of strings at the bottom and type the translation for each item in the &lt;em&gt;Translation&lt;/em&gt; field. Notice that each string has an icon to its left. This represents the state of each translation. You can use this to, for example, mark some string for later review. This feature is really useful when sharing translation files with other people.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pedroq.org/media/2013/Aug/WPMAT6.gif&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;h3 id=&#34;translate-using-microsoft-translator-service:d75c5c8aeef46df8400d5a6ebfe21f5e&#34;&gt;Translate using Microsoft Translator Service&lt;/h3&gt;

&lt;p&gt;The Microsoft Tranlator service can also be used to help you in your localization process, either by providing suggestions for each translation or by completely replacing a string with its translation. To use the Microsoft Translator service, simply select the string you want to translate and click on the options in the toolbar.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pedroq.org/media/2013/Aug/WPMAT7.png&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;As you may know, machine translation is not perfect because of the complexity of the human language. When you use this service to translate a string (or a group of strings), you&amp;rsquo;ll notice that they are flagged as being MTed (Machine Translated) and that their state is set to &lt;em&gt;Needs Review&lt;/em&gt;. You can later accept this translation or make changes to suit your style.&lt;/p&gt;

&lt;p&gt;To translate all the strings in a file using the Microsoft Translator service, click the arrow bellow the &lt;strong&gt;Translate&lt;/strong&gt; button and select &lt;strong&gt;Translate All&lt;/strong&gt;. You can also right click the .xlf file in the Solution Explorer and select &lt;strong&gt;Generate machine translations&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pedroq.org/media/2013/Aug/WPMAT8.png&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;h2 id=&#34;share-a-translation-files:d75c5c8aeef46df8400d5a6ebfe21f5e&#34;&gt;Share a translation files&lt;/h2&gt;

&lt;p&gt;Sometimes you may want to add support for a language that you may not know very well. In this case you can share the XLIFF file with another person (or service) so that they can translate it for you. XLIFF is a format that is supported by a lot of applications. You can also open this type of files using the Multilingual App Toolkit. It can be used standalone. Just look for it in your Start Menu.&lt;/p&gt;

&lt;h3 id=&#34;exporting-a-file-for-translation:d75c5c8aeef46df8400d5a6ebfe21f5e&#34;&gt;Exporting a file for translation&lt;/h3&gt;

&lt;p&gt;Right click the file you want to export and select &lt;strong&gt;Send for translation&amp;hellip;&lt;/strong&gt;. Select &lt;strong&gt;File folder location&lt;/strong&gt; if you want to save the .xlf file to a local folder or select &lt;strong&gt;Mail recipient&lt;/strong&gt; if you want to send the .xlf by email. Select &lt;strong&gt;Use compressed (zipped) folder&lt;/strong&gt; if you want to compress the file before saving or sending.&lt;/p&gt;

&lt;p&gt;&amp;ldquo;Note that you can export multiple files at once. Select the files you want to export in the Solution Explorer while pressing &lt;em&gt;Ctrl&lt;/em&gt; and follow the steps above.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pedroq.org/media/2013/Aug/WPMAT9.png&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;h3 id=&#34;import-a-translation-file:d75c5c8aeef46df8400d5a6ebfe21f5e&#34;&gt;Import a translation file&lt;/h3&gt;

&lt;p&gt;Right click the matching .xlf file in your solution and select &lt;strong&gt;Import translation&amp;hellip;&lt;/strong&gt;. If the languages for each file are not the same, the importing will fail.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pedroq.org/media/2013/Aug/WPMAT10.png&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;h2 id=&#34;test-a-localized-application:d75c5c8aeef46df8400d5a6ebfe21f5e&#34;&gt;Test a localized application&lt;/h2&gt;

&lt;p&gt;You can test a different language by changing the display language on your phone (or emulator). Check this article for more information: &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/windowsphone/develop/hh487168%28v=vs.105%29.aspx&#34;&gt;How to test a localized app for Windows Phone&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In alternative, you can force your application to use a different language by adding the following line to the beginning of the App constructor in &lt;em&gt;App.xaml.cs&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using System.Globalization;
using System.Threading;
...

Thread.CurrentThread.CurrentUICulture = new CultureInfo(&amp;quot;pt&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Replace the &lt;strong&gt;pt&lt;/strong&gt; string with the language code you want to test.&lt;/p&gt;

&lt;p&gt;After translating our example application to Portuguese, this is what it looks like:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pedroq.org/media/2013/Aug/WPMAT11.gif&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;h2 id=&#34;final-words:d75c5c8aeef46df8400d5a6ebfe21f5e&#34;&gt;Final words&lt;/h2&gt;

&lt;p&gt;As said before, by having an app in the Windows Phone Store you can reach a lot of different cultures. English may be a globally spoken language, but if you can adapt your application to better target a specific culture, you will be providing your users a better experience. And if a user likes your application, he will certainly recommend it to other people, giving you a larger user base. Tools like the Multilingual App Toolkit can help you achieve this.&lt;/p&gt;

&lt;p&gt;This article was originally created for the &lt;a href=&#34;http://developer.nokia.com/Community/Wiki/Adding_multilingual_support_to_your_Windows_Phone_application_using_the_Multilingual_App_Toolkit&#34;&gt;Nokia Developer Wiki&lt;/a&gt;.&lt;br /&gt; This is the official Nokia wiki, dedicated to development on Nokia platforms. You can find a lot of great articles, code examples and many other resources. Be sure to check it!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Accessing Instagram from your Windows Phone Application</title>
      <link>http://pedroq.org/2013/08/accessing-instagram-from-your-windows-phone-application/</link>
      <pubDate>Mon, 12 Aug 2013 13:32:00 +0100</pubDate>
      
      <guid>http://pedroq.org/2013/08/accessing-instagram-from-your-windows-phone-application/</guid>
      <description>

&lt;p&gt;Instagram is a popular online photo and video sharing social network. It allows its users to take pictures and videos, apply digital filters to them, and then share them with the community. At the moment there is no official Windows Phone support but there is an API that you can use to access the content that is shared by the users. &lt;em&gt;Note that the current API does not allow non-official clients to upload photos.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This post will show you how to integrate Instagram in your application. For this example, we&amp;rsquo;ll create a simple app to retrieve the list of your followers and the users you&amp;rsquo;re following.&lt;/p&gt;

&lt;h2 id=&#34;prerequisites:8e317ca018c0dea81391e150ff9a68f7&#34;&gt;Prerequisites&lt;/h2&gt;

&lt;p&gt;To be able to access the Instagram API you must have an Instagram account. This account is free but can only be created using an official Instagram client, available for Android and iOS.&lt;/p&gt;

&lt;h3 id=&#34;getting-your-api-key:8e317ca018c0dea81391e150ff9a68f7&#34;&gt;Getting your API key&lt;/h3&gt;

&lt;p&gt;First of all, you must be registered as a developer. You can register by filling the &lt;a href=&#34;http://instagram.com/developer/register/&#34;&gt;Developer Signup Form&lt;/a&gt;. Make sure you read their &lt;a href=&#34;http://instagram.com/about/legal/terms/api/&#34;&gt;API Terms of Use&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;In order to be able to use Instagram API, you must &lt;a href=&#34;http://instagram.com/developer/clients/register/&#34;&gt;register your application&lt;/a&gt; to get an API Key. In this example we&amp;rsquo;ll use  for the &lt;em&gt;Redirect URI&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pedroq.org/media/2013/Aug/InstagrapWP-CreateApp.png&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;Take a note of your Client ID and Client Secret as we&amp;rsquo;ll be needing them later.&lt;/p&gt;

&lt;h2 id=&#34;setting-up-the-project:8e317ca018c0dea81391e150ff9a68f7&#34;&gt;Setting up the project&lt;/h2&gt;

&lt;p&gt;For this example we&amp;rsquo;ll start with the Windows Phone Panorama App template and modify it to accustom our needs. Open a new instance of Visual Studio and create a &lt;strong&gt;Windows Phone Panorama App&lt;/strong&gt; project.&lt;/p&gt;

&lt;h3 id=&#34;adding-references:8e317ca018c0dea81391e150ff9a68f7&#34;&gt;Adding references&lt;/h3&gt;

&lt;p&gt;Next we&amp;rsquo;ll add some NuGet packages that we will need:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Microsoft HTTP Client Libraries&lt;/strong&gt; (&lt;a href=&#34;https://nuget.org/packages/Microsoft.Net.Http&#34;&gt;Microsoft.Net.Http&lt;/a&gt;) which contains the &lt;code&gt;HttpClient&lt;/code&gt; class that will be used to make HTTP calls to the Instagram API&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Json.NET&lt;/strong&gt; (&lt;a href=&#34;https://nuget.org/packages/Newtonsoft.Json&#34;&gt;Newtonsoft.Json&lt;/a&gt;) will help parse the JSON responses&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Async for Windows Phone 7.5&lt;/strong&gt; (&lt;a href=&#34;https://nuget.org/packages/Microsoft.Bcl.Async&#34;&gt;Microsoft.Bcl.Async&lt;/a&gt;) allows the use of the new async features (&lt;em&gt;required only for Windows Phone 7.5&lt;/em&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To install NuGet packages you can go to the Solution Explorer, right click the project file and select &lt;strong&gt;Manage NuGet Packages&lt;/strong&gt;. Search for the package name and click Install. You can also use the &lt;a href=&#34;http://docs.nuget.org/docs/start-here/using-the-package-manager-console&#34;&gt;Package Manager Console&lt;/a&gt; to install these packages.&lt;/p&gt;

&lt;h3 id=&#34;modifying-the-panorama-template:8e317ca018c0dea81391e150ff9a68f7&#34;&gt;Modifying the Panorama template&lt;/h3&gt;

&lt;p&gt;Start by renaming the &lt;strong&gt;ItemViewModel.cs&lt;/strong&gt; located under ViewModels to &lt;strong&gt;UserViewModel.cs&lt;/strong&gt;. This class will hold the information for each Instagram user. In this article we&amp;rsquo;ll just use Username, Full Name and Profile Picture.&lt;/p&gt;

&lt;p&gt;Open &lt;strong&gt;UserViewModel.cs&lt;/strong&gt; and rename the &lt;em&gt;ItemViewModel&lt;/em&gt; class to &lt;em&gt;UserViewModel&lt;/em&gt;. Now change the properties of this class to &lt;em&gt;Username&lt;/em&gt;, &lt;em&gt;FullName&lt;/em&gt; and &lt;em&gt;ProfilePicUrl&lt;/em&gt;. Your class should look similar to this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class UserViewModel : INotifyPropertyChanged
{
    private string _username;
    public string Username
    {
        get
        {
            return _username;
        }
        set
        {
            if (value != _username)
            {
                _username = value;
                NotifyPropertyChanged(&amp;quot;Username&amp;quot;);
            }
        }
    }

    private string _fullName;
    public string FullName
    {
        get
        {
            return _fullName;
        }
        set
        {
            if (value != _fullName)
            {
                _fullName = value;
                NotifyPropertyChanged(&amp;quot;FullName&amp;quot;);
            }
        }
    }

    private string _profilePicUrl;
    public string ProfilePicUrl
    {
        get
        {
            return _profilePicUrl;
        }
        set
        {
            if (value != _profilePicUrl)
            {
                _profilePicUrl = value;
                NotifyPropertyChanged(&amp;quot;ProfilePicUrl&amp;quot;);
            }
        }
    }

    public event PropertyChangedEventHandler PropertyChanged;
    private void NotifyPropertyChanged(String propertyName)
    {
        PropertyChangedEventHandler handler = PropertyChanged;
        if (null != handler)
        {
            handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now open &lt;strong&gt;MainViewModel.cs&lt;/strong&gt;. Change the &lt;code&gt;Items&lt;/code&gt; property name to &lt;code&gt;Following&lt;/code&gt;. This collection will hold all the users that you are currently following. Add another property named &lt;code&gt;Followers&lt;/code&gt;, which will store all the users that are following you. You can also delete the &lt;code&gt;SampleProperty&lt;/code&gt; and the sample items inside the &lt;code&gt;LoadData()&lt;/code&gt; method. Your file should now look similar to this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class MainViewModel : INotifyPropertyChanged
{
    public MainViewModel()
    {

    }

    public ObservableCollection Following { get; private set; }
    public ObservableCollection Followers { get; private set; }


    public bool IsDataLoaded
    {
        get;
        private set;
    }

    public void LoadData()
    {
        // TODO

        this.IsDataLoaded = true;
    }

    public event PropertyChangedEventHandler PropertyChanged;
    private void NotifyPropertyChanged(String propertyName)
    {
        PropertyChangedEventHandler handler = PropertyChanged;
        if (null != handler)
        {
            handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we need to change the UI to reflect this changes. Open the &lt;strong&gt;MainPage.xaml&lt;/strong&gt; and change your Panorama control to the following:&lt;/p&gt;

&lt;p&gt;Finally open &lt;strong&gt;MainViewModelSampleData.xaml&lt;/strong&gt; under the &lt;strong&gt;SampleData&lt;/strong&gt; folder. This file holds the sample data that populates the UI during design time. Since we changed our view models we must also modify the sample data to reflect our changes.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ll be using the default Application Icon as a Profile Picture for your users. Replace the existing data with the following:&lt;/p&gt;

&lt;p&gt;Also, be sure to remove the line:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SampleProperty=&amp;quot;Sample Text Property Value&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Thanks to this sample data, you can see how your application will look like when populated with data:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pedroq.org/media/2013/Aug/InstagramWP-SampleData.png&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;h2 id=&#34;using-instagram-api:8e317ca018c0dea81391e150ff9a68f7&#34;&gt;Using Instagram API&lt;/h2&gt;

&lt;p&gt;All the API endpoints are located at &lt;strong&gt;api.instagram.com&lt;/strong&gt; and are only accessible via http&lt;strong&gt;s&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Be sure to check &lt;a href=&#34;http://instagram.com/developer&#34;&gt;Instagram Developer Documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;oauth-authentication:8e317ca018c0dea81391e150ff9a68f7&#34;&gt;OAuth Authentication&lt;/h3&gt;

&lt;p&gt;In order to be able to access the Instagram API you must first authenticate using the OAuth 2.0 protocol. For more information about this protocol see &lt;a href=&#34;http://tools.ietf.org/html/draft-ietf-oauth-v2-12&#34;&gt;the current draft&lt;/a&gt;. You can also check this article: &lt;a href=&#34;http://www.developer.nokia.com/Community/Wiki/OAuth_on_Windows_Phone&#34; title=&#34;OAuth on Windows Phone&#34;&gt;OAuth on Windows Phone&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Add a new Blank Page and name it Authentication.xaml. Add a &lt;code&gt;WebBrowser&lt;/code&gt; control and name it &lt;code&gt;AuthBrowser&lt;/code&gt;. Add the &lt;code&gt;Navigated()&lt;/code&gt; event handler to the &lt;code&gt;AuthBrowser&lt;/code&gt;. We will use this &lt;code&gt;WebBrowser&lt;/code&gt; control to obtain an access token that we can use to access the API.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pedroq.org/media/2013/Aug/InstagrapWP-SignInDesign.png&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;protected override void OnNavigatedTo(NavigationEventArgs e)
{
    base.OnNavigatedTo(e);
    AuthBrowser.Navigate(new Uri(&amp;quot;https://instagram.com/oauth/authorize/?client_id=&amp;amp;amp;redirect_uri=http://instagram.com&amp;amp;amp;response_type=token&amp;quot;));
}

void AuthBrowser_Navigated(object sender, NavigationEventArgs e)
{
    //access token is a Url fragment and these fragments start with &#39;#&#39;
    if (e.Uri.AbsoluteUri.Contains(&#39;#&#39;))
    {
        //parse our access token
        if (e.Uri.Fragment.StartsWith(&amp;quot;#access_token=&amp;quot;))
        {
            string token = e.Uri.Fragment.Replace(&amp;quot;#access_token=&amp;quot;, string.Empty);

            //save our token
            IsolatedStorageSettings.ApplicationSettings[&amp;quot;access_token&amp;quot;] = token;
            IsolatedStorageSettings.ApplicationSettings.Save();

            //now that we have our token, let&#39;s go back to the MainPage
            NavigationService.GoBack();
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Make sure you replace &lt;strong&gt;YOUR_CLIENT_ID&lt;/strong&gt; with your own Client ID.&lt;/p&gt;

&lt;p&gt;By default all apps have read access. If you wish to use extended access, such as liking, commenting, or managing friendships you&amp;rsquo;ll need to add the &lt;strong&gt;scope&lt;/strong&gt; parameter to your request url. According to the &lt;a href=&#34;http://instagram.com/developer/authentication/&#34;&gt;Instagram API documentation&lt;/a&gt;, these are the currently supported scopes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;basic&lt;/strong&gt; - to read any and all data related to a user (e.g. following/followed-by lists, photos, etc.) (granted by default)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;comments&lt;/strong&gt; - to create or delete comments on a user’s behalf&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;relationships&lt;/strong&gt; - to follow and unfollow users on a user’s behalf&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;likes&lt;/strong&gt; - to like and unlike items on a user’s behalf&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You should only request the scope you need at the time of authorization. If in the future you require additional scope, you may forward the user to the authorization URL with that additional scope to be granted. If you attempt to perform a request with an access token that isn&amp;rsquo;t authorized for that scope, you will receive an &lt;code&gt;OAuthPermissionsException&lt;/code&gt; error return.&lt;/p&gt;

&lt;p&gt;If you’d like to request multiple scopes at once, simply separate the scopes by a space. In the url, this equates to an escaped space (“%2B”). So if you’re requesting the likes and comments permission, the parameter will look like this: &lt;em&gt;scope=likes%2Bcomments&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Note that an empty scope parameter (scope=) is invalid; you must either omit the scope, or specify a non-empty scope list.&lt;/p&gt;

&lt;p&gt;Finally go to &lt;strong&gt;MainPage.xaml.cs&lt;/strong&gt;. Change the &lt;code&gt;MainPage_Loaded&lt;/code&gt; event handler so that you can redirect the user to the &lt;code&gt;Authentication&lt;/code&gt; view you created.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;private void MainPage_Loaded(object sender, RoutedEventArgs e)
{

    if (IsolatedStorageSettings.ApplicationSettings.Contains(&amp;quot;access_token&amp;quot;))
    {
        if (!App.ViewModel.IsDataLoaded)
        {
            App.ViewModel.LoadData();
        }
    }
    else
        NavigationService.Navigate(new Uri(&amp;quot;/Authentication.xaml&amp;quot;, UriKind.Relative));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Try and run your app. The authentication process will look like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pedroq.org/media/2013/Aug/InstagrapWP-SignIn.png&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;h3 id=&#34;accessing-content:8e317ca018c0dea81391e150ff9a68f7&#34;&gt;Accessing content&lt;/h3&gt;

&lt;p&gt;Now that we have an access token, we can start making API calls. As mentioned earlier, for this example, we&amp;rsquo;ll get the list of followers and the list of people that we&amp;rsquo;re following.&lt;/p&gt;

&lt;p&gt;Create a class named &lt;strong&gt;InstagramAPI.cs&lt;/strong&gt;. In this file we&amp;rsquo;ll put all the code required to use the API.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using Newtonsoft.Json;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Net;
using System.Net.Http;
using System.Threading.Tasks;

public class InstagramAPI
{
    private readonly string apiBaseUrl = &amp;quot;https://api.instagram.com/v1&amp;quot;;
    private readonly string apiAccessToken;

    private HttpClient _httpClient;

    public InstagramAPI(string accessToken)
    {
        this.apiAccessToken = accessToken;
        _httpClient = new HttpClient();
    }

    private async Task SendAsync(HttpRequestMessage request) where T : class
    {

        HttpResponseMessage response;
        response = await _httpClient.SendAsync(request);

        //TODO: Error Handling
        if (response.StatusCode == HttpStatusCode.OK)
        {
            string responseBody = await response.Content.ReadAsStringAsync();

            return JsonConvert.DeserializeObject(responseBody);
        }

        return null;
    }

    public async Task GetFollowers()
    {
        var request = new HttpRequestMessage(HttpMethod.Get, apiBaseUrl %2B &amp;quot;/users/self/followed-by?access_token=&amp;quot; %2B apiAccessToken);
        var followersResponse =  await SendAsync(request);
        var result = new ObservableCollection();
        foreach (var u in followersResponse.data)
        {
            result.Add(new UserViewModel() { FullName = u.full_name, Username = u.username, ProfilePicUrl = u.profile_picture });
        }
        return result;
    }

    public async Task GetFollowing()
    {
        var request = new HttpRequestMessage(HttpMethod.Get, apiBaseUrl %2B &amp;quot;/users/self/follows?access_token=&amp;quot; %2B apiAccessToken);
        var followingResponse = await SendAsync(request);
        var result = new ObservableCollection();
        foreach (var u in followingResponse.data)
        {
            result.Add(new UserViewModel() { FullName = u.full_name, Username = u.username, ProfilePicUrl = u.profile_picture });
        }
        return result;
    }
}

public class InstagramUser
{
    public string username { get; set; }
    public string bio { get; set; }
    public string website { get; set; }
    public string profile_picture { get; set; }
    public string full_name { get; set; }
    public string id { get; set; }
}

public class InstagramResponse
{
    public List data { get; set; }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;SendAsync&lt;/code&gt; method is a generic method that can be used to send a request and return a specific type of object. It uses the &lt;strong&gt;Json.Net&lt;/strong&gt; package to parse the JSON response and map it to a .Net object, &lt;code&gt;InstagramUser&lt;/code&gt; and &lt;code&gt;InstagramResponse&lt;/code&gt; in this example.&lt;/p&gt;

&lt;h3 id=&#34;displaying-the-content:8e317ca018c0dea81391e150ff9a68f7&#34;&gt;Displaying the content&lt;/h3&gt;

&lt;p&gt;Finally we need to display the data in the UI. Go to the &lt;strong&gt;MainViewModel.cs&lt;/strong&gt; file and locate the &lt;code&gt;LoadData()&lt;/code&gt; method. Add the following code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public async void LoadData()
{
    string accessToken = (string)IsolatedStorageSettings.ApplicationSettings[&amp;quot;access_token&amp;quot;];

    InstagramAPI apiClient = new InstagramAPI(accessToken);
    Following = await apiClient.GetFollowing();
    NotifyPropertyChanged(&amp;quot;Following&amp;quot;);
    Followers =  await apiClient.GetFollowers();
    NotifyPropertyChanged(&amp;quot;Followers&amp;quot;);
    this.IsDataLoaded = true;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s it, you should now be able to see the users you are following and a list of people that follow you!&lt;/p&gt;

&lt;h2 id=&#34;summary:8e317ca018c0dea81391e150ff9a68f7&#34;&gt;Summary&lt;/h2&gt;

&lt;p&gt;This should give you an idea on how easy is to access Instagram from your Windows Phone application. Be sure to check the &lt;a href=&#34;http://instagram.com/developer&#34;&gt;Instagram API documentation&lt;/a&gt; to understand the various features that you can integrate into your application.&lt;/p&gt;

&lt;iframe src=&#34;https://skydrive.live.com/embed?cid=FE1F5056FC3DA96F&amp;resid=FE1F5056FC3DA96F%211080&amp;authkey=AHaK9Q4wBjUjoUw&#34; width=&#34;98&#34; height=&#34;120&#34; frameborder=&#34;0&#34; scrolling=&#34;no&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;This article was originally created for the &lt;a href=&#34;http://developer.nokia.com/Community/Wiki/Accessing_Instagram_from_your_Windows_Phone_Application&#34;&gt;Nokia Developer Wiki&lt;/a&gt;.&lt;br /&gt; This is the official Nokia wiki, dedicated to development on Nokia platforms. You can find a lot of great articles, code examples and many other resources. Be sure to check it!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>